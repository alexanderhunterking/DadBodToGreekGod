// <auto-generated />
using System;
using DadBodToGreekGod.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DadBodToGreekGod.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.CalendarDayEntity", b =>
                {
                    b.Property<int>("CalendarDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalendarDayId"));

                    b.Property<int?>("CalendarWeekEntityCalendarId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfTheWeek")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("TimeOfDay")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CalendarDayId");

                    b.HasIndex("CalendarWeekEntityCalendarId");

                    b.HasIndex("MealId");

                    b.HasIndex("UserId");

                    b.ToTable("CalendarDays", (string)null);
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.CalendarWeekEntity", b =>
                {
                    b.Property<int>("CalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalendarId"));

                    b.Property<int>("CookingDay")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingDay")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CalendarId");

                    b.HasIndex("UserId");

                    b.ToTable("CalendarWeeks", (string)null);
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.IngredientEntity", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<double>("CaloriesPer100g")
                        .HasColumnType("float");

                    b.Property<double>("CarbsPer100g")
                        .HasColumnType("float");

                    b.Property<double>("FatPer100g")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProteinPer100g")
                        .HasColumnType("float");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients", (string)null);

                    b.HasData(
                        new
                        {
                            IngredientId = 100,
                            CaloriesPer100g = 165.0,
                            CarbsPer100g = 0.0,
                            FatPer100g = 3.6000000000000001,
                            Name = "Chicken Breast",
                            ProteinPer100g = 31.0
                        },
                        new
                        {
                            IngredientId = 2,
                            CaloriesPer100g = 250.0,
                            CarbsPer100g = 0.0,
                            FatPer100g = 17.0,
                            Name = "Ground Beef",
                            ProteinPer100g = 26.0
                        },
                        new
                        {
                            IngredientId = 3,
                            CaloriesPer100g = 206.0,
                            CarbsPer100g = 0.0,
                            FatPer100g = 13.0,
                            Name = "Salmon",
                            ProteinPer100g = 25.0
                        },
                        new
                        {
                            IngredientId = 4,
                            CaloriesPer100g = 55.0,
                            CarbsPer100g = 11.0,
                            FatPer100g = 0.59999999999999998,
                            Name = "Broccoli",
                            ProteinPer100g = 3.7000000000000002
                        },
                        new
                        {
                            IngredientId = 5,
                            CaloriesPer100g = 23.0,
                            CarbsPer100g = 3.6000000000000001,
                            FatPer100g = 0.40000000000000002,
                            Name = "Spinach",
                            ProteinPer100g = 2.8999999999999999
                        },
                        new
                        {
                            IngredientId = 6,
                            CaloriesPer100g = 86.0,
                            CarbsPer100g = 20.100000000000001,
                            FatPer100g = 0.10000000000000001,
                            Name = "Sweet Potato",
                            ProteinPer100g = 1.6000000000000001
                        },
                        new
                        {
                            IngredientId = 7,
                            CaloriesPer100g = 130.0,
                            CarbsPer100g = 28.0,
                            FatPer100g = 0.20000000000000001,
                            Name = "White Rice",
                            ProteinPer100g = 2.7000000000000002
                        },
                        new
                        {
                            IngredientId = 104,
                            CaloriesPer100g = 135.0,
                            CarbsPer100g = 0.0,
                            FatPer100g = 1.0,
                            Name = "Turkey Breast",
                            ProteinPer100g = 29.0
                        },
                        new
                        {
                            IngredientId = 105,
                            CaloriesPer100g = 250.0,
                            CarbsPer100g = 0.0,
                            FatPer100g = 17.0,
                            Name = "Steak",
                            ProteinPer100g = 26.0
                        },
                        new
                        {
                            IngredientId = 106,
                            CaloriesPer100g = 143.0,
                            CarbsPer100g = 0.0,
                            FatPer100g = 7.0,
                            Name = "Pork Chops",
                            ProteinPer100g = 21.0
                        },
                        new
                        {
                            IngredientId = 107,
                            CaloriesPer100g = 82.0,
                            CarbsPer100g = 0.0,
                            FatPer100g = 1.0,
                            Name = "Cod",
                            ProteinPer100g = 18.0
                        },
                        new
                        {
                            IngredientId = 108,
                            CaloriesPer100g = 116.0,
                            CarbsPer100g = 0.0,
                            FatPer100g = 1.0,
                            Name = "Tuna",
                            ProteinPer100g = 25.0
                        },
                        new
                        {
                            IngredientId = 109,
                            CaloriesPer100g = 96.0,
                            CarbsPer100g = 0.0,
                            FatPer100g = 1.7,
                            Name = "Tilapia",
                            ProteinPer100g = 21.0
                        },
                        new
                        {
                            IngredientId = 110,
                            CaloriesPer100g = 98.0,
                            CarbsPer100g = 3.3999999999999999,
                            FatPer100g = 4.2999999999999998,
                            Name = "Cottage Cheese",
                            ProteinPer100g = 11.0
                        },
                        new
                        {
                            IngredientId = 111,
                            CaloriesPer100g = 144.0,
                            CarbsPer100g = 3.8999999999999999,
                            FatPer100g = 8.0,
                            Name = "Tofu",
                            ProteinPer100g = 15.0
                        },
                        new
                        {
                            IngredientId = 200,
                            CaloriesPer100g = 59.0,
                            CarbsPer100g = 3.6000000000000001,
                            FatPer100g = 0.40000000000000002,
                            Name = "Greek Yogurt",
                            ProteinPer100g = 10.0
                        },
                        new
                        {
                            IngredientId = 112,
                            CaloriesPer100g = 109.0,
                            CarbsPer100g = 0.0,
                            FatPer100g = 1.0,
                            Name = "Canned Tuna",
                            ProteinPer100g = 24.0
                        },
                        new
                        {
                            IngredientId = 201,
                            CaloriesPer100g = 132.0,
                            CarbsPer100g = 23.699999999999999,
                            FatPer100g = 0.5,
                            Name = "Black Beans",
                            ProteinPer100g = 8.9000000000000004
                        },
                        new
                        {
                            IngredientId = 113,
                            CaloriesPer100g = 132.0,
                            CarbsPer100g = 23.699999999999999,
                            FatPer100g = 0.5,
                            Name = "Black Beans",
                            ProteinPer100g = 8.9000000000000004
                        },
                        new
                        {
                            IngredientId = 115,
                            CaloriesPer100g = 85.0,
                            CarbsPer100g = 0.0,
                            FatPer100g = 1.2,
                            Name = "Shrimp",
                            ProteinPer100g = 20.0
                        },
                        new
                        {
                            IngredientId = 116,
                            CaloriesPer100g = 61.0,
                            CarbsPer100g = 4.7999999999999998,
                            FatPer100g = 3.7000000000000002,
                            Name = "Whole Milk",
                            ProteinPer100g = 3.2000000000000002
                        },
                        new
                        {
                            IngredientId = 101,
                            CaloriesPer100g = 120.0,
                            CarbsPer100g = 21.0,
                            FatPer100g = 1.8999999999999999,
                            Name = "Quinoa",
                            ProteinPer100g = 4.0
                        },
                        new
                        {
                            IngredientId = 102,
                            CaloriesPer100g = 120.0,
                            CarbsPer100g = 21.0,
                            FatPer100g = 1.8999999999999999,
                            Name = "Quinoa",
                            ProteinPer100g = 4.0
                        },
                        new
                        {
                            IngredientId = 118,
                            CaloriesPer100g = 318.0,
                            CarbsPer100g = 1.6000000000000001,
                            FatPer100g = 25.0,
                            Name = "Mozzarella Cheese",
                            ProteinPer100g = 22.0
                        },
                        new
                        {
                            IngredientId = 119,
                            CaloriesPer100g = 403.0,
                            CarbsPer100g = 1.3,
                            FatPer100g = 33.0,
                            Name = "Cheddar Cheese",
                            ProteinPer100g = 25.0
                        },
                        new
                        {
                            IngredientId = 120,
                            CaloriesPer100g = 389.0,
                            CarbsPer100g = 2.6000000000000001,
                            FatPer100g = 32.0,
                            Name = "Colby Jack Cheese",
                            ProteinPer100g = 23.0
                        },
                        new
                        {
                            IngredientId = 121,
                            CaloriesPer100g = 576.0,
                            CarbsPer100g = 22.0,
                            FatPer100g = 49.0,
                            Name = "Almonds",
                            ProteinPer100g = 21.0
                        },
                        new
                        {
                            IngredientId = 122,
                            CaloriesPer100g = 143.0,
                            CarbsPer100g = 1.1000000000000001,
                            FatPer100g = 9.5,
                            Name = "Eggs",
                            ProteinPer100g = 13.0
                        },
                        new
                        {
                            IngredientId = 123,
                            CaloriesPer100g = 111.0,
                            CarbsPer100g = 23.5,
                            FatPer100g = 0.90000000000000002,
                            Name = "Brown Rice",
                            ProteinPer100g = 2.6000000000000001
                        },
                        new
                        {
                            IngredientId = 124,
                            CaloriesPer100g = 77.0,
                            CarbsPer100g = 17.0,
                            FatPer100g = 0.10000000000000001,
                            Name = "Potatoes",
                            ProteinPer100g = 2.0
                        },
                        new
                        {
                            IngredientId = 125,
                            CaloriesPer100g = 68.0,
                            CarbsPer100g = 12.0,
                            FatPer100g = 1.3999999999999999,
                            Name = "Oatmeal",
                            ProteinPer100g = 2.3999999999999999
                        },
                        new
                        {
                            IngredientId = 126,
                            CaloriesPer100g = 43.0,
                            CarbsPer100g = 8.3000000000000007,
                            FatPer100g = 0.29999999999999999,
                            Name = "Brussels Sprouts",
                            ProteinPer100g = 3.3999999999999999
                        },
                        new
                        {
                            IngredientId = 127,
                            CaloriesPer100g = 49.0,
                            CarbsPer100g = 8.8000000000000007,
                            FatPer100g = 0.90000000000000002,
                            Name = "Kale",
                            ProteinPer100g = 4.2999999999999998
                        },
                        new
                        {
                            IngredientId = 128,
                            CaloriesPer100g = 25.0,
                            CarbsPer100g = 5.0,
                            FatPer100g = 0.29999999999999999,
                            Name = "Cauliflower",
                            ProteinPer100g = 1.8999999999999999
                        },
                        new
                        {
                            IngredientId = 129,
                            CaloriesPer100g = 43.0,
                            CarbsPer100g = 10.0,
                            FatPer100g = 0.5,
                            Name = "Blackberries",
                            ProteinPer100g = 2.0
                        },
                        new
                        {
                            IngredientId = 130,
                            CaloriesPer100g = 31.0,
                            CarbsPer100g = 7.0,
                            FatPer100g = 0.20000000000000001,
                            Name = "Green Beans",
                            ProteinPer100g = 1.8
                        },
                        new
                        {
                            IngredientId = 131,
                            CaloriesPer100g = 89.0,
                            CarbsPer100g = 23.0,
                            FatPer100g = 0.29999999999999999,
                            Name = "Bananas",
                            ProteinPer100g = 1.1000000000000001
                        },
                        new
                        {
                            IngredientId = 132,
                            CaloriesPer100g = 32.0,
                            CarbsPer100g = 8.0,
                            FatPer100g = 0.29999999999999999,
                            Name = "Strawberries",
                            ProteinPer100g = 0.69999999999999996
                        },
                        new
                        {
                            IngredientId = 133,
                            CaloriesPer100g = 52.0,
                            CarbsPer100g = 11.0,
                            FatPer100g = 0.69999999999999996,
                            Name = "Raspberries",
                            ProteinPer100g = 1.2
                        },
                        new
                        {
                            IngredientId = 134,
                            CaloriesPer100g = 50.0,
                            CarbsPer100g = 13.0,
                            FatPer100g = 0.10000000000000001,
                            Name = "Pineapple",
                            ProteinPer100g = 0.5
                        },
                        new
                        {
                            IngredientId = 135,
                            CaloriesPer100g = 57.0,
                            CarbsPer100g = 14.0,
                            FatPer100g = 0.29999999999999999,
                            Name = "Blueberries",
                            ProteinPer100g = 0.69999999999999996
                        },
                        new
                        {
                            IngredientId = 136,
                            CaloriesPer100g = 41.0,
                            CarbsPer100g = 10.0,
                            FatPer100g = 0.20000000000000001,
                            Name = "Carrots",
                            ProteinPer100g = 0.90000000000000002
                        },
                        new
                        {
                            IngredientId = 137,
                            CaloriesPer100g = 18.0,
                            CarbsPer100g = 3.8999999999999999,
                            FatPer100g = 0.20000000000000001,
                            Name = "Tomatoes",
                            ProteinPer100g = 0.90000000000000002
                        },
                        new
                        {
                            IngredientId = 138,
                            CaloriesPer100g = 31.0,
                            CarbsPer100g = 6.0,
                            FatPer100g = 0.29999999999999999,
                            Name = "Bell Peppers",
                            ProteinPer100g = 1.0
                        },
                        new
                        {
                            IngredientId = 139,
                            CaloriesPer100g = 160.0,
                            CarbsPer100g = 8.5,
                            FatPer100g = 14.699999999999999,
                            Name = "Avocado",
                            ProteinPer100g = 2.0
                        });
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.MacroEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<int>("Carbs")
                        .HasColumnType("int");

                    b.Property<int>("Fats")
                        .HasColumnType("int");

                    b.Property<int>("Protein")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Macros");
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.MealEntity", b =>
                {
                    b.Property<int>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MealId"));

                    b.Property<int>("CalendarId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MealId");

                    b.HasIndex("UserId");

                    b.ToTable("Meals", (string)null);
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.MealIngredientEntity", b =>
                {
                    b.Property<int>("MealIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MealIngredientId"));

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MealIngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MealId");

                    b.HasIndex("UserId");

                    b.ToTable("MealIngredients", (string)null);
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.ShoppingListEntity", b =>
                {
                    b.Property<int>("ShoppingListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingListId"));

                    b.Property<int>("CalendarId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingListId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingLists", (string)null);
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.CalendarDayEntity", b =>
                {
                    b.HasOne("DadBodToGreekGod.Data.Entities.CalendarWeekEntity", null)
                        .WithMany("CalendarDays")
                        .HasForeignKey("CalendarWeekEntityCalendarId");

                    b.HasOne("DadBodToGreekGod.Data.Entities.MealEntity", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DadBodToGreekGod.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.CalendarWeekEntity", b =>
                {
                    b.HasOne("DadBodToGreekGod.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.MealEntity", b =>
                {
                    b.HasOne("DadBodToGreekGod.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.MealIngredientEntity", b =>
                {
                    b.HasOne("DadBodToGreekGod.Data.Entities.IngredientEntity", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DadBodToGreekGod.Data.Entities.MealEntity", "Meal")
                        .WithMany("MealIngredients")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DadBodToGreekGod.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Meal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.ShoppingListEntity", b =>
                {
                    b.HasOne("DadBodToGreekGod.Data.Entities.IngredientEntity", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DadBodToGreekGod.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DadBodToGreekGod.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DadBodToGreekGod.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DadBodToGreekGod.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DadBodToGreekGod.Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.CalendarWeekEntity", b =>
                {
                    b.Navigation("CalendarDays");
                });

            modelBuilder.Entity("DadBodToGreekGod.Data.Entities.MealEntity", b =>
                {
                    b.Navigation("MealIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
